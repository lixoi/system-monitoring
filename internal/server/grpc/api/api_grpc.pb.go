// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SystemStatistics_GetSystemDump_FullMethodName    = "/api.SystemStatistics/GetSystemDump"
	SystemStatistics_StreamSystemDump_FullMethodName = "/api.SystemStatistics/StreamSystemDump"
)

// SystemStatisticsClient is the client API for SystemStatistics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemStatisticsClient interface {
	GetSystemDump(ctx context.Context, in *GetSystemDumpRequest, opts ...grpc.CallOption) (*GetSystemDumpResponse, error)
	StreamSystemDump(ctx context.Context, in *GetSystemDumpRequest, opts ...grpc.CallOption) (SystemStatistics_StreamSystemDumpClient, error)
}

type systemStatisticsClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemStatisticsClient(cc grpc.ClientConnInterface) SystemStatisticsClient {
	return &systemStatisticsClient{cc}
}

func (c *systemStatisticsClient) GetSystemDump(ctx context.Context, in *GetSystemDumpRequest, opts ...grpc.CallOption) (*GetSystemDumpResponse, error) {
	out := new(GetSystemDumpResponse)
	err := c.cc.Invoke(ctx, SystemStatistics_GetSystemDump_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemStatisticsClient) StreamSystemDump(ctx context.Context, in *GetSystemDumpRequest, opts ...grpc.CallOption) (SystemStatistics_StreamSystemDumpClient, error) {
	stream, err := c.cc.NewStream(ctx, &SystemStatistics_ServiceDesc.Streams[0], SystemStatistics_StreamSystemDump_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &systemStatisticsStreamSystemDumpClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SystemStatistics_StreamSystemDumpClient interface {
	Recv() (*GetSystemDumpResponse, error)
	grpc.ClientStream
}

type systemStatisticsStreamSystemDumpClient struct {
	grpc.ClientStream
}

func (x *systemStatisticsStreamSystemDumpClient) Recv() (*GetSystemDumpResponse, error) {
	m := new(GetSystemDumpResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SystemStatisticsServer is the server API for SystemStatistics service.
// All implementations must embed UnimplementedSystemStatisticsServer
// for forward compatibility
type SystemStatisticsServer interface {
	GetSystemDump(context.Context, *GetSystemDumpRequest) (*GetSystemDumpResponse, error)
	StreamSystemDump(*GetSystemDumpRequest, SystemStatistics_StreamSystemDumpServer) error
	mustEmbedUnimplementedSystemStatisticsServer()
}

// UnimplementedSystemStatisticsServer must be embedded to have forward compatible implementations.
type UnimplementedSystemStatisticsServer struct {
}

func (UnimplementedSystemStatisticsServer) GetSystemDump(context.Context, *GetSystemDumpRequest) (*GetSystemDumpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemDump not implemented")
}
func (UnimplementedSystemStatisticsServer) StreamSystemDump(*GetSystemDumpRequest, SystemStatistics_StreamSystemDumpServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSystemDump not implemented")
}
func (UnimplementedSystemStatisticsServer) mustEmbedUnimplementedSystemStatisticsServer() {}

// UnsafeSystemStatisticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemStatisticsServer will
// result in compilation errors.
type UnsafeSystemStatisticsServer interface {
	mustEmbedUnimplementedSystemStatisticsServer()
}

func RegisterSystemStatisticsServer(s grpc.ServiceRegistrar, srv SystemStatisticsServer) {
	s.RegisterService(&SystemStatistics_ServiceDesc, srv)
}

func _SystemStatistics_GetSystemDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemDumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemStatisticsServer).GetSystemDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemStatistics_GetSystemDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemStatisticsServer).GetSystemDump(ctx, req.(*GetSystemDumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemStatistics_StreamSystemDump_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSystemDumpRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SystemStatisticsServer).StreamSystemDump(m, &systemStatisticsStreamSystemDumpServer{stream})
}

type SystemStatistics_StreamSystemDumpServer interface {
	Send(*GetSystemDumpResponse) error
	grpc.ServerStream
}

type systemStatisticsStreamSystemDumpServer struct {
	grpc.ServerStream
}

func (x *systemStatisticsStreamSystemDumpServer) Send(m *GetSystemDumpResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SystemStatistics_ServiceDesc is the grpc.ServiceDesc for SystemStatistics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemStatistics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.SystemStatistics",
	HandlerType: (*SystemStatisticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemDump",
			Handler:    _SystemStatistics_GetSystemDump_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSystemDump",
			Handler:       _SystemStatistics_StreamSystemDump_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
